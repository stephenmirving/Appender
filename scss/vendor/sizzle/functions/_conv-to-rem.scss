@charset 'UTF-8';

/// Converts a pixel value into REM units.
/// @access public
///
/// @param {Length-Percentage} $pixels - A value to convert to REM units.
/// @param {Number} $base [null] - The base font-size.
///
/// @return {Length} The values in REMs.
/// @require {function} strip-unit
@function conv-to-rem($values, $base: null) {
  $rem-vals: ();
  $count: length($values);

  // If no base is defined, defer to the $base-font-size variable. If that does
  // not exist, default to 16
  @if (not $base) {
    $base: if(global-variable-exists(base-font-size), $base-font-size, 16);
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if (unit($base) == '%') {
    $base: ($base / 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if (unit($base) == 'rem') {
    $base: strip-unit($base) * 16px;
  }

  @if ($count == 1) {
    @return px-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, px-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}


/// Converts a pixel value to matching rem value. *Any* value passed, regardless
/// of unit, is assumed to be a pixel value. By default, the base pixel value
/// used to calculate the rem value is taken from the `$base-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @return {Number} A number in rems, calculated based on the given value and
/// the base pixel value. rem values are passed through as is.
/// @require {function} strip-unit
@function px-to-rem($value, $base: null) {
  // Check if the value is a number
  @if (type-of($value) != 'number') {
    @warn inspect($value) + ', which is not a number, was passed to rem-calc().';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if (unit($value) == 'em') {
    $value: strip-unit($value) * 1rem;
  }

  // Calculate rem if units for $value is not rem or em
  @if (unit($value) != 'rem') {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

  // Turn 0rem into 0
  @if ($value == 0rem) {
    $value: 0;
  }

  @return $value;
}
