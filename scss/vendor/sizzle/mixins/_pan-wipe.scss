@charset 'UTF-8';

/// Animates a panning wipe style effect on the background of an element
///
/// @param {Keyword} $direction [right] - The direction the pan is heading
/// @param {Time} $timing [6s] - The duration of the animation (s or ms)
/// @param {Mixed} $bg
/// [linear-gradient(270deg, #CC6AA5, #3E91CC, #2dCCA7) center / 600% 100%] -
/// The shorthand background property for the element. For this effect it is
/// recommended to use either a linear gradient, or an image.
/// @param {Length-Percentage} $size [100%] - The size of the element. If the
/// $height property is not set explicitly, this is both height and width, but
/// if $height is set explicitly, then this value sets only the width.
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|Keyword} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. The default of null will set it to the default timing function
/// of ease.
/// @param {Length-Percentage} $height [$size] - The height of the element.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
@mixin pan-wipe(
  $direction: right,
  $timing: 6s,
  $bg: linear-gradient(270deg, #CC6AA5, #3E91CC, #2dCCA7) center / 600% 100%,
  $size: 100%,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $height: $size,
  $anim-num: null
) {
  // $direction default of `right` values
  $pos-val1: 0% 50%;
  $pos-val2: 100% 50%;
  @if (to-lower-case($direction) == 'left' or to-lower-case($direction) == 'l') {
    $pos-val1: 100% 50%;
    $pos-val2: 0% 50%;
  } @else if ($direction == to-lower-case('top')
      or to-lower-case($direction) == 't' or to-lower-case($direction) == 'down'
      or to-lower-case($direction) == 'd') {
    $pos-val1: 50% 100%;
    $pos-val2: 50% 0%;
  } @else if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'b' or to-lower-case($direction) == 'up'
      or to-lower-case($direction) == 'u') {
    $pos-val1: 50% 0%;
    $pos-val2: 50% 100%;
  } @else if (to-lower-case($direction) == 'top-left'
      or to-lower-case($direction) == 'topleft'
      or to-lower-case($direction) == 'tl'
      or to-lower-case($direction) == 'left-top'
      or to-lower-case($direction) == 'lefttop'
      or to-lower-case($direction) == 'lt') {
    $pos-val1: 100% 100%;
    $pos-val2: 0% 0%;
  } @else if (to-lower-case($direction) == 'top-right'
      or to-lower-case($direction) == 'topright'
      or to-lower-case($direction) == 'tr'
      or to-lower-case($direction) == 'right-top'
      or to-lower-case($direction) == 'righttop'
      or to-lower-case($direction) == 'rt') {
    $pos-val1: 0% 100%;
    $pos-val2: 100% 0%;
  } @else if (to-lower-case($direction) == 'bottom-left'
      or to-lower-case($direction) == 'bottomleft'
      or to-lower-case($direction) == 'bl'
      or to-lower-case($direction) == 'left-bottom'
      or to-lower-case($direction) == 'leftbottom'
      or to-lower-case($direction) == 'lb') {
    $pos-val1: 100% 0%;
    $pos-val2: 0% 100%;
  } @else if (to-lower-case($direction) == 'bottom-right'
      or to-lower-case($direction) == 'bottomright'
      or to-lower-case($direction) == 'br'
      or to-lower-case($direction) == 'right-bottom'
      or to-lower-case($direction) == 'rightbottom'
      or to-lower-case($direction) == 'rb') {
    $pos-val1: 0% 0%;
    $pos-val2: 100% 100%;
  } @else if (to-lower-case($direction) != 'right'
      and to-lower-case($direction) != 'r') {
    @error 'Invalid direction of `#{$direction}` for the `pan-wipe` mixin.';
  }

  @if (type-of($timing) != 'number') {
    @error 'Invalid timing value of `#{$timing}` for the `pan-wipe` ' +
        'mixin. The timing property must be a number.';
  } @else if (unitless($timing)) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if index('s' 'ms', unit($timing)) == null {
    @error 'Invalid timing value of `#{$timing}` for the `pan-wipe` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: ($timing / 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if ($delay == 0 or $delay == 0s or $delay == 0ms or $delay or $delay == 'none'
      or $delay 'no' or $delay == 'n' or $delay == 'n/a' or $delay == nil) {
    $delay: null;
  }
  @if ($delay) {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{$delay}` for the `pan-wipe` ' +
          'mixin. The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if (index('s' 'ms', unit($delay)) == null) {
      @error 'Invalid delay value of `#{$delay}` for the `pan-wipe` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: ($delay / 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: unquote(str-slice($delay + '', 2));
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if ($iterations == 'infinite' or $iterations == 'inf'
        or $iterations == 'i') {
      $iterations: infinite;
    } @else if ((unitless($iterations) and type-of($iterations) == 'number')
        or $iterations == initial or $iterations == inherit) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{$iterations}` for the ' +
          '`text-flicker` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no'
      or $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default'
      or $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor') {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt'
      or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if ($anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse'
      or $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r'
      or $anim-dir == 'ar') {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` for the ' +
        '`text-flicker` mixin';
  }
  animation: wipe-color#{$anim-num} #{$timing} #{$timing-func} #{$delay}
              #{$iterations} #{$anim-dir} both;
  background: $bg;
  height: $height;
  overflow: hidden;
  width: $size;

  @at-root {
    @-webkit-keyframes wipe-color#{$anim-num} {
      0% {
        background-position: $pos-val1;
      }

      100% {
        background-position: $pos-val2;
      }
    }

    @keyframes wipe-color#{$anim-num} {
      0% {
        background-position: $pos-val1;
      }

      100% {
        background-position: $pos-val2;
      }
    }
  }
}
