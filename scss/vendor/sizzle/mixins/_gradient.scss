@charset 'UTF-8';

/// A robust and well supported down-n-dirty gradient mixin
///
/// @param {Color} $start-color - The starting color in the gradient
/// @param {Color} $end-color - The ending color in the gradient
/// @param {Keyword|Angle} $orientation [horizontal] - The direction of the
/// grandient.
/// @param {Percentage} $start-percent [0%] - Starting percentage of the gradient.
/// @param {Percentage} $end-percent [100%] - Ending percentage of the gradient.
///
/// @throw Invalid $orientation value
@mixin gradient(
  $start-color,
  $end-color,
  $orientation: horizontal,
  $start-percent: 0%,
  $end-percent: 100%
) {
  $vertical: false;
  background: $start-color;
  @if ($orientation == 'vertical' or $orientation == 'vert' or $orientation == 'v'
      or $orientation == 'down' or $orientation == 'd' or $orientation == 'bottom'
      or $orientation == 'to bottom' or $orientation == 'top' or $orientation == 'top to bottom') {
    $vertical: true;
    background: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
    filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$start-color}',endColorstr='#{$end-color}',GradientType=0)");
  } @else if ($orientation == 'horizontal' or $orientation == 'horiz'
      or $orientation == 'h' or $orientation == 'right' or $orientation == null
      or $orientation == 'to right' or $orientation == 'left' or $orientation == 'left to right') {
    background: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
  } @else if ($orientation == 'radial' or $orientation == 'rad' or $orientation == 'r'
      or $orientation == 'circular' or $orientation == 'circle') {
    background: radial-gradient(ellipse at center, $start-color $start-percent, $end-color $end-percent);
  } @else if ($orientation == 'diagonal' or $orientation == 'diag' or $orientation == 'd'
      or $orientation == 'd1' or $orientation == 'diagonal1' or $orientation == 'diag1') {
    background: linear-gradient(45deg, $start-color $start-percent, $end-color  $end-percent);
  } @else if ($orientation == 'diagonal2' or $orientation == 'diag2' or $orientation == 'd2') {
    background: linear-gradient(135deg, $start-color $start-percent, $end-color $end-percent);
  } @else if (is-number($orientation)
      and index('deg' 'rad' 'grad' 'turn', unit($orientation)) != null) {
    background: linear-gradient($orientation, $start-color $start-percent, $end-color $end-percent);
  } @else {
    @error 'Invalid $orientation value of `#{$orientation}` for the `gradient` mixin.';
  }
  @if (not $vertical) {
    filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$start-color}',endColorstr='#{$end-color}',GradientType=1)");
  }
}
