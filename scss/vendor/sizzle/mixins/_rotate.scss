@charset 'UTF-8';

/// Animates an element by rotating it along a point and/or an axis. For the the
/// best effect on a diagonal rotation, use the `animation-stage` mixin on the
/// parent element, and a front and back child element within the rotated
/// element, with the animation-front-face and animation-back-face mixins
/// applied, respectively.
///
/// @param {Keyword} $point [center] - The point the element will appear to be
/// rotating around.
/// @param {Time} $timing [.4s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Keyword} $axis [null] - The animation can optionally rotate along an
/// axis line. This value can be null (or false, `no`, `n`), `horizontal` (or
/// `horiz`, `horz`, `hor`, `h`) or `vertical` (or `vert`, `ver`, `v`). Along
/// the horizontal axis, only `top`, `bottom`, or `center` $point values are
/// valid. Along the vertical axis, only `left`, `right`, or `center` $point
/// values are valid.
/// @param {Number|Keyword} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. Default value of null will apply the recommended function for
/// this animation of `cubic-bezier(.25, .46, .45, .94)`, unless the $axis value
/// is null, in which case the timing-function defaults to `linear`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin rotate(
  $direction: 'center',
  $timing: .4s,
  $delay: null,
  $axis: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  //  Default value for the 'center' direction
  $trans-val1: rotate(0);
  $trans-val2: rotate(360deg);
  $trans-origin-val: null;
  $trans-valD: null;
  $is-diagonal: false;

  @if (to-lower-case($direction) == 'top' or to-lower-case($direction) == 't') {
    $trans-origin-val: 0%;
    $direction: 'top';
  } @else if (to-lower-case($direction) == 'top-right'
      or to-lower-case($direction) == 'topright'
      or to-lower-case($direction) == 'right-top'
      or to-lower-case($direction) == 'righttop'
      or to-lower-case($direction) == 't-r'
      or to-lower-case($direction) == 'tr'
      or to-lower-case($direction) == 'r-t'
      or to-lower-case($direction) == 'rt') {
    $trans-origin-val: 0% 50%;
    $direction: 'right-top';
  } @else if (to-lower-case($direction) == 'right'
      or to-lower-case($direction) == 'r') {
    $trans-origin-val: 100%;
    $direction: 'right';
  } @else if (to-lower-case($direction) == 'bottom-right'
      or to-lower-case($direction) == 'bottomright'
      or to-lower-case($direction) == 'right-bottom'
      or to-lower-case($direction) == 'rightbottom'
      or to-lower-case($direction) == 'b-r'
      or to-lower-case($direction) == 'br'
      or to-lower-case($direction) == 'r-b'
      or to-lower-case($direction) == 'r-b') {
    transform-origin: 100% 50%;
    $direction: 'bottom-right';
  } @else if (to-lower-case($direction) == 'bottom'
      or to-lower-case($direction) == 'btm'
      or to-lower-case($direction) == 'b') {
    transform-origin: 100%;
    $direction: 'bottom';
  } @else if (to-lower-case($direction) == 'bottom-left'
      or to-lower-case($direction) == 'bottomleft'
      or to-lower-case($direction) == 'left-bottom'
      or to-lower-case($direction) == 'leftbottom'
      or to-lower-case($direction) == 'b-l'
      or to-lower-case($direction) == 'bl'
      or to-lower-case($direction) == 'l-b'
      or to-lower-case($direction) == 'lb') {
    transform-origin: 100% 0%;
    $direction: 'bottom-left';
  } @else if (to-lower-case($direction) == 'left'
      or to-lower-case($direction) == 'l') {
    transform-origin: 0%;
    $direction: 'left';
  } @else if (to-lower-case($direction) == 'top-left'
      or to-lower-case($direction) == 'topleft'
      or to-lower-case($direction) == 'left-top'
      or to-lower-case($direction) == 'lefttop'
      or to-lower-case($direction) == 't-l'
      or to-lower-case($direction) == 'tl'
      or to-lower-case($direction) == 'l-t'
      or to-lower-case($direction) == 'lt') {
    transform-origin: 0% 0%;
    $direction: 'top-left';
  } @else if (to-lower-case($direction) == 'center'
      or to-lower-case($direction) != 'centre'
      or to-lower-case($direction) != 'cent'
      or to-lower-case($direction) != 'cen'
      or to-lower-case($direction) != 'c') {
    $direction: 'center';
  } @else {
    @error 'Invalid direction value of `#{$direction}` for the ' +
        '`rotate` mixin.';
  }

  @if ($axis and $axis != 'none' and $axis != 'no' and $axis != 'n') {
    @if ($axis == 'vertical' or $axis == 'vert'
        or $axis == 'ver' or $axis == 'v') {
      $trans-val1: rotateY(0);
      $trans-val2: rotateY(360deg);
      @if ($direction != 'left' and $direction != 'right'
          and $direction != 'center') {
        @error 'You have chosen an axis value of `vertical` that cannot be ' +
            'used with the direction value of `#{$direction}` for the ' +
            '`rotate` mixin. A vertical axis must have direction value of ' +
            'either `left`, `right`, or `center`.';
      } @else if ($direction == 'left') {
        $trans-origin-val: 0%;
      } @else if ($direction == 'right') {
        $trans-origin-val: 100%;
      }
    } @else if ($axis == 'horizontal' or $axis == 'horz' or $axis == 'hor'
        or $axis == 'h') {
      $trans-val1: rotateX(0);
      $trans-val2: rotateX(-360deg);
      @if ($direction != 'top' and $direction != 'bottom'
          and $direction != 'center') {
        @error 'You have chosen an axis value of `horizontal` that cannot be ' +
            'used with the direction value of `#{$direction}` for the ' +
            '`rotate` mixin. A horizontal axis must have direction value of ' +
            'either `top`, `bottom`, or `center`.';
      } @else if ($direction == 'top') {
        $trans-origin-val: 0%;
      } @else if ($direction == 'bottom') {
        $trans-origin-val: 100%;
      }
    } @else if ($axis == 'diagonal' or $axis == 'diagonal1' or $axis == 'diag'
        or $axis == 'diag1' or $axis == 'd' or $axis == 'd1'
        or  $axis == 'diagonal2' or $axis == 'diag2' or $axis == 'd2') {
      $is-diagonal: true;
      @if ($direction != 'center' and $direction != 'top-right'
          and $direction != 'top-left' and $direction != 'bottom-right'
          and $direction != 'bottom-left') {
        @error 'You have chosen an axis value of `diagonal` that cannot be ' +
            'used with the direction value of `#{$direction}` for the ' +
            '`rotate` mixin. A diagonal axis must have direction value of ' +
            'either `top-left`, `top-right`, `bottom-right`, `bottom-left`, ' +
            'or `center`.';
      } @else if ($direction == 'center') {
        @if $axis == 'diagonal2' or $axis == 'diag2' or $axis == 'd2' {
          $trans-val1: rotate3d(-1, 1, 0, 0);
          $trans-valD: rotate3d(-1, 1, 0, 180deg);
          $trans-val2: rotate3d(-1, 1, 0, 360deg);
        } @else {
          $trans-val1: rotate3d(1, 1, 0, 0deg);
          $trans-valD: rotate3d(1, 1, 0, -360deg);
          $trans-val2: rotate3d(1, 1, 0, -180deg);
        }
      } @else if ($direction == 'top-right') {
        $trans-val1: rotate3d(1, 1, 0, 0);
        $trans-valD: rotate3d(1, 1, 0, -180deg);
        $trans-val2: rotate3d(1, 1, 0, -360deg);
        $trans-origin-val: 100% 0%;
      } @else if ($direction == 'bottom-right') {
        $trans-val1: rotate3d(-1, 1, 0, 0);
        $trans-valD: rotate3d(-1, 1, 0, -180deg);
        $trans-val2: rotate3d(-1, 1, 0, -360deg);
        $trans-origin-val: 100% 50%;
      } @else if ($direction == 'bottom-left') {
        $trans-val1: rotate3d(1, 1, 0, 0);
        $trans-valD: rotate3d(1, 1, 0, 180deg);
        $trans-val2: rotate3d(1, 1, 0, 360deg);
        $trans-origin-val: 0% 50%;
      } @else if ($direction == 'top-left') {
        $trans-val1: rotate3d(-1, 1, 0, 0);
        $trans-valD: rotate3d(-1, 1, 0, 180deg);
        $trans-val2: rotate3d(-1, 1, 0, 360deg);
        $trans-origin-val: 0% 0%;
      }
    } @else {
      @error 'Invalid $axis value of `#{$axis} for the `rotate` mixin.';
    }
  }

  @if (type-of($timing) != 'number') {
    @error 'Invalid timing value of `#{$timing}` for the `rotate` ' +
        'mixin. The timing property must be a number.';
  } @else if (unitless($timing)) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if (index('s' 'ms', unit($timing)) == null) {
    @error 'Invalid timing value of `#{$timing}` for the `rotate` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: ($timing / 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if ($delay == 0 or $delay == 0s or $delay == 0ms or $delay == 'none'
      or $delay == 'no' or $delay == 'n' or $delay == 'n/a' or $delay == nil) {
    $delay: null;
  }
  @if ($delay) {
    @if (type-of($delay) != 'number') {
      @error 'Invalid delay value of `#{$delay}` for the `rotate` ' +
          'mixin. The delay property must be a number.';
    } @else if unitless($delay) {
      $delay: $delay * 1s;
    } @else if index('s' 'ms', unit($delay)) == null {
      @error 'Invalid delay value of `#{$delay}` for the `rotate` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: ($delay / 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: unquote(str-slice($delay + '', 2));
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if ($iterations == 'infinite' or $iterations == 'inf'
        or $iterations == 'i') {
      $iterations: infinite;
    } @else if ((unitless($iterations) and type-of($iterations) == 'number')
        or $iterations == initial or $iterations == inherit) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{$iterations}` for the ' +
          '`rotate` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no'
      or $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default'
      or $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor') {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if ($anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse'
      or $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r'
      or $anim-dir == 'ar') {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` for the ' +
        '`rotate` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if($is-diagonal, linear, cubic-bezier(.25, .46, .45, .94));
  }

  @if not ($anim-num) {
    $anim-num: null;
  }
  animation: rotate#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  @if ($is-diagonal) {
    backface-visibility: hidden;
    transform: translate3d(0,0,0);
    transform-style: preserve-3d;
  }

  @at-root {
    @keyframes rotate#{$anim-num} {
      0% {
        transform: $trans-val1;
        @if $direction != 'center' {
          transform-origin: $trans-origin-val;
        }
      }

      @if ($is-diagonal) {
        50% {
          transform: $trans-valD;
          @if $direction != 'center' {
            transform-origin: $trans-origin-val;
          }
        }
      }

      100% {
        transform: $trans-val2;
        @if $direction != 'center' {
          transform-origin: $trans-origin-val;
        }
      }
    }
  }
}
