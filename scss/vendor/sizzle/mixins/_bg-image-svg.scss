@charset 'UTF-8';

/// Apply an SVG background image with a fall-back PNG version and a PNG version
/// that is scaled to 2x for HiDPI and Retina displays.
///
/// @param {URL} $img - Location of the image. Must be in quotes to be read.
/// @param {Length-Percentage} $bg-width - Width component of the background-size
/// property value for the image.
/// @param {Length-Percentage} $bg-height [$bg-width] - Height component of the
/// background-size property value for the image.
/// @param {Map} $extra-hidpi-properties [null] - You can pass this argument
/// a map of property: value pairs that will be added to the HiDPI/Retina
/// media query.
/// @param {String} $img-2x-suffix ['-2x']- The suffix that is is appended to
/// the end of image name to designate that it is the 2x version for HiDPI
/// displays. By default, this will look for the $image-2x-suffix global
/// variable to use, and if it cannot be found it will just use '-2x'.
///
/// @throw Invalid $bg-width data type
/// @throw Invalid $bg-height data type
@mixin bg-image-svg(
  $svg-img,
  $bg-width,
  $bg-height: $bg-width,
  $extra-hidpi-properties: null,
  $img-2x-suffix: if(global-variable-exists(image-2x-suffix), $image-2x-suffix, '@2x')
) {
  $hidpi-png-img: null;

  @if (not $extra-hidpi-properties or $extra-hidpi-properties == 'none'
      or $extra-hidpi-properties == 'no' or $extra-hidpi-properties == nil
      or $extra-hidpi-properties == 'n/a' or $extra-hidpi-properties == ' ') {
    $extra-hidpi-properties: null;
  }
  @if (not $bg-width or $bg-width == 'none' or $bg-width == 'no'
      or $bg-width == nil or $bg-width == 'n/a' or $bg-width == ' ') {
    $bg-width: null;
  } @else if (type-of($bg-width) != 'number' or type-of($bg-height) != 'number') {
    @error 'Invalid type for the dimensions used in the `bg-image` mixin.';
  } @else {
    $bg-width: if((unitless($bg-width)), $bg-width*1px, $bg-width);
    $bg-height: if((unitless($bg-height)), $bg-height*1px, $bg-height);
  }
  @if (not $img-2x-suffix) {
    $img-2x-suffix: if(global-variable-exists(image-2x-suffix), $image-2x-suffix, '@2x');
  }
  @if (str-index(to-lower-case($svg-img), '.svg') == null) {
    $svg-img: #{$svg-img + '.svg'};
    $hidpi-png-img: #{$svg-img + $img-2x-suffix + '.png'};
  }
  $png-img: str-slice($svg-img, 1, str-length($svg-img) - 4) + '.png';
  $hidpi-png-img: str-insert($png-img, $img-2x-suffix, str-length($png-img) - 3);

  // Normal sized PNG fallback image
  background: url(#{$png-img});
  // SVG image with properties to ensure it overwrites PNG if possible
  background: url(#{$svg-img}), linear-gradient(transparent, transparent);

  @if ($bg-width) {
    background-size: $bg-width $bg-height;
  }

  // Scaled up version of the image for HiDPI displays
  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),
         only screen and (min--moz-device-pixel-ratio: 1.3),
         only screen and (-o-min-device-pixel-ratio: 13/10),
         only screen and (min-device-pixel-ratio: 1.3),
         only screen and (min-resolution: 124.8dpi),
         only screen and (min-resolution: 1.3dppx) {
    background: url(#{$hidpi-png-img}); // 2x PNG fallback image
    background: url(#{$svg-img}), linear-gradient(transparent, transparent);
    @if ($bg-width) {
      background-size: $bg-width $bg-height;
    }

    @if ($extra-hidpi-properties and $extra-hidpi-properties != ()) {
      $key-list: map-keys($extra-hidpi-properties);
      @each $key in $key-list {
        #{$key}: map-get($extra-hidpi-properties, $key);
      }
    }
  }
}
