@charset 'UTF-8';

/// Generates an animation that slides an element in or out from or towards a
/// given direction.
///
/// @param {Keyword|Boolean} $in-or-out [in] - Determines if the element will
/// slide `in` (or true, `i`) our `out` (or false, `o`).
/// @param {Keyword} $direction [top] - Will either slide in from this
/// direction or slide out towards this direction.
/// @param {Time} $timing [.6s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|Keyword} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(.25, .46, .45, .94)` on a slide
/// in and a timing function of `cubic-bezier(.55, .085, .68, .53)` on a slide
/// out.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin slide(
  $in-or-out: in,
  $direction: top,
  $timing: .6s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for a slide in from the top
  $opacity-val1: 0;
  $opacity-val2: 1;
  $trans-val1: translateY(-1000px);
  $trans-val2: translateY(0);
  $temp-val: null;

  // Input scrubbing
  @if ($in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i') {
    $in-or-out: true;
  } @else if ($in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o') {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of `#{$in-or-out}` for the `slide` mixin.';
  }

  @if ($direction) {
    @if (to-lower-case($direction) == 'bottom'
        or to-lower-case($direction) == 'btm'
        or to-lower-case($direction) == 'b') {
      $trans-val1: translateY(1000px);
    } @else if (to-lower-case($direction) == 'left'
        or to-lower-case($direction) == 'l') {
      $trans-val1: translateX(-1000px);
      $trans-val2: translateX(0);
    } @else if (to-lower-case($direction) == 'right'
        or to-lower-case($direction) == 'r') {
      $trans-val1: translateX(1000px);
      $trans-val2: translateX(0);
    } @else if (to-lower-case($direction) == 'top-left'
        or to-lower-case($direction) == 'topleft'
        or to-lower-case($direction) == 't-l' or to-lower-case($direction) == 'tl'
        or to-lower-case($direction) == 'left-top'
        or to-lower-case($direction) == 'lefttop'
        or to-lower-case($direction) == 'l-t'
        or to-lower-case($direction) == 'lt') {
      $trans-val1: translateY(-1000px) translateX(-1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if (to-lower-case($direction) == 'top-right'
        or to-lower-case($direction) == 'topright'
        or to-lower-case($direction) == 't-r' or to-lower-case($direction) == 'tr'
        or to-lower-case($direction) == 'right-top'
        or to-lower-case($direction) == 'righttop'
        or to-lower-case($direction) == 'r-t'
        or to-lower-case($direction) == 'rt') {
      $trans-val1: translateY(-1000px) translateX(1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if (to-lower-case($direction) == 'bottom-right'
        or to-lower-case($direction) == 'bottomright'
        or to-lower-case($direction) == 'b-r' or to-lower-case($direction) == 'br'
        or to-lower-case($direction) == 'right-bottom'
        or to-lower-case($direction) == 'rightbottom'
        or to-lower-case($direction) == 'r-b'
        or to-lower-case($direction) == 'rb') {
      $trans-val1: translateY(1000px) translateX(1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if (to-lower-case($direction) == 'bottom-left'
        or to-lower-case($direction) == 'bottomleft'
        or to-lower-case($direction) == 'b-l' or to-lower-case($direction) == 'bl'
        or to-lower-case($direction) == 'left-bottom'
        or to-lower-case($direction) == 'leftbottom'
        or to-lower-case($direction) == 'l-b'
        or to-lower-case($direction) == 'lb') {
      $trans-val1: translateY(1000px) translateX(-1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else {
      @error 'Invalid direction of `#{$direction}` chosen for the `slide` mixin.';
    }
  } @else {
    $direction: null;
  }

  @if (not $in-or-out) {
    // Swap values for slide-out state
    $temp-val: $opacity-val1;
    $opacity-val1: $opacity-val2;
    $opacity-val2: $temp-val;

    $temp-val: $trans-val1;
    $trans-val1: $trans-val2;
    $trans-val2: $temp-val;
  }

  @if (type-of($timing) != 'number') {
    @error 'Invalid timing value of `#{$timing}` for the `slide` ' +
        'mixin. The timing property must be a number.';
  } @else if (unitless($timing)) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if (index('s' 'ms', unit($timing)) == null) {
    @error 'Invalid timing value of `#{$timing}` for the `slide` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if (unit($timing) == 'ms' and $timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: ($timing / 1000ms) * 1s;
    // Get rid of possible leading zero in front of decimal place
    @if (str-slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(str-slice($timing + '', 2));
    }
  }

  @if ($delay == 0 or $delay == 0s or $delay == 0ms or $delay == 'none'
      or $delay == 'no' or $delay == 'n' or $delay == 'n/a' or $delay == nil) {
    $delay: null;
  }
  @if ($delay) {
    @if type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{$delay}` for the `slide` mixin.' +
          'The delay property must be a number.';
    } @else if (unitless($delay)) {
      $delay: $delay * 1s;
    } @else if (index('s' 'ms', unit($delay)) == null) {
      @error 'Invalid delay value of `#{$delay}` for the `slide` mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if (unit($delay) == 'ms' and $delay % 10 == 0ms) {
      $delay: ($delay / 1000ms) * 1s;
      @if (str-slice($delay + '', 1, 2) == '0.') {
        $delay: unquote(str-slice($delay + '', 2));
      }
    }
  } @else {
    $delay: null;
  }

  @if ($iterations) {
    @if ($iterations == 'infinite' or $iterations == 'inf'
        or $iterations == 'i') {
      $iterations: infinite;
    } @else if ((unitless($iterations) and type-of($iterations) == 'number')
        or $iterations == initial or $iterations == inherit) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of `#{$iterations}` for the ' +
          '`slide` mixin.';
    }
  }

  @if (not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no'
      or $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default'
      or $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor') {
    $anim-dir: null;
  } @else if ($anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r') {
    $anim-drection: reverse;
  } @else if ($anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a') {
    $anim-dir: alternate;
  } @else if ($anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse'
      or $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r'
      or $anim-dir == 'ar') {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` for the ' +
        '`slide` mixin';
  }

  @if (not $timing-func or $timing-func == true or $timing-func == 'none'
      or $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def'
      or $timing-func == 'default' or $timing-func == 'd') {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if(($in-or-out), cubic-bezier(.25, .46, .45, .94), cubic-bezier(.55, .085, .68, .53));
  }

  @if (not $anim-num) {
    $anim-num: null;
  }
  -webkit-animation: slide#{$anim-num} #{$timing} #{$timing-func}
                      #{$delay} #{$iterations} #{$anim-dir} both;
          animation: slide#{$anim-num} #{$timing} #{$timing-func}
                      #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {

    @-webkit-keyframes slide#{$anim-num} {
      0% {
        -webkit-transform: $trans-val1;
                transform: $trans-val1;
        opacity: $opacity-val1;
      }

      100% {
        -webkit-transform: $trans-val2;
                transform: $trans-val2;
        opacity: $opacity-val2;
      }
    }

    @keyframes slide#{$anim-num} {
      0% {
        -webkit-transform: $trans-val1;
                transform: $trans-val1;
        opacity: $opacity-val1;
      }

      100% {
        -webkit-transform: $trans-val2;
                transform: $trans-val2;
        opacity: $opacity-val2;
      }
    }
  }
}
